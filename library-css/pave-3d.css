/* https://la-cascade.io/articles/creer-un-cube-en-css
fonctionne avec pave-3d.js
les faces du cube
enfant 1: plafond, chapeau, top
enfant 2: sol, semelle
enfant 3: devant
enfant 4: droite
enfant 5: derrière, fond
enfant 6: gauche
*/
pave-3d, pole-3d, cube-3d, equi-3d, trec-3d, octo-3d, hexa-3d, cyld-3d {
	/* propriétés modifiables */
	--width: 8cm;
	--height: 4cm;
	--depth: 2cm;
	--bord: solid 4px var(--bord-color);
	--fond: var(--fond-color);
	color: var(--text-color);
	/* ------ */
	border: none;
	background: none;
	--depth-half: calc(var(--depth) /2);
	width: var(--width);
	height: var(--height);
	display: inline-block;
	transform-style: preserve-3d;
	padding: 0;
	text-align: center;
	background-position: center;
}
/* ------------------------ les pavés ------------------------ */

pole-3d, cube-3d, octo-3d, cyld-3d { --depth: var(--width); }
cube-3d { --height: var(--width); }
pave-3d >*, pole-3d >*, cube-3d >*, equi-3d >*, trec-3d >*, octo-3d >*, hexa-3d >*, cyld-3d >* {
	border: var(--bord);
	background: var(--fond);
	width: inherit;
	height: inherit;
	margin: 0;
	color: inherit;
	position: absolute;
	top: 0;
	left: 0;
	text-align: center;
	background-position: center;
	background-size: contain;
	transform-origin: center center;
}
pave-3d >*:nth-child(1), pole-3d >*:nth-child(1), cube-3d >*:nth-child(1), equi-3d >*:nth-child(1), trec-3d >*:nth-child(1), octo-3d >*:nth-child(1), hexa-3d >*:nth-child(1), cyld-3d >*:nth-child(1)
{
	height: var(--depth);
	transform: rotateX(90deg) translateZ(var(--depth-half));
}
pave-3d >*:nth-child(2), pole-3d >*:nth-child(2), cube-3d >*:nth-child(2), equi-3d >*:nth-child(2), trec-3d >*:nth-child(2), octo-3d >*:nth-child(2), hexa-3d >*:nth-child(2), cyld-3d >*:nth-child(2)
{
	height: var(--depth);
	transform: rotateX(-90deg) translateZ(calc(var(--height) - var(--depth-half)));
}
pave-3d >*:nth-child(5), pole-3d >*:nth-child(5), cube-3d >*:nth-child(5), equi-3d >*:nth-child(5), trec-3d >*:nth-child(5), octo-3d >*:nth-child(5), hexa-3d >*:nth-child(5)
	{ transform: rotateY(180deg) translateZ(var(--depth-half)); }
pave-3d >*:nth-child(6), pole-3d >*:nth-child(6), cube-3d >*:nth-child(6), octo-3d >*:nth-child(3) {
	width: var(--depth);
	transform: rotateY(-90deg) translateZ(var(--depth-half));
}
pave-3d >*:nth-child(4), pole-3d >*:nth-child(4), cube-3d >*:nth-child(4), octo-3d >*:nth-child(7) {
	width: var(--depth);
	transform: rotateY(90deg) translateZ(calc(var(--width) - var(--depth-half)));
}
pave-3d >*:nth-child(3), pole-3d >*:nth-child(3), cube-3d >*:nth-child(3), hexa-3d >*:nth-child(8), octo-3d >*:nth-child(10) { transform: translateZ(var(--depth-half)); }

/* ------------------------ pavé qui tourne selon spin-vertical ------------------------ */

pave-3d.vertical >*:nth-child(3), pole-3d.vertical >*:nth-child(3), cube-3d.vertical >*:nth-child(3), hexa-3d.vertical >*:nth-child(8), octo-3d.vertical >*:nth-child(10) { transform: rotateX(180deg) translateZ(var(--depth-half)); }

/* ------------------------ les formes variées ------------------------ */

equi-3d >*:nth-child(1), trec-3d >*:nth-child(1){ clip-path: polygon(0 0, 100% 0, 50% 100%); }
equi-3d >*:nth-child(2), trec-3d >*:nth-child(2){ clip-path: polygon(0 100%, 100% 100%, 50% 0); }

equi-3d{ --depth: calc(var(--width) * 0.8660254037844386); }
equi-3d >*:nth-child(6){
	width: var(--width);
	transform: rotateY(-60deg) translateZ(calc(var(--width) * 0.8660254037844386 * 0.25)) translateX(-12.5%);
}
equi-3d >*:nth-child(4){
	width: var(--width);
	transform: rotateY(60deg) translateZ(calc(var(--width) * 0.8660254037844386 * 0.25)) translateX(12.5%);
}
trec-3d{ --depth: calc(var(--width) /2); }
trec-3d >*:nth-child(6){
	width: calc(var(--width) * 0.7071067811865475);
	transform: rotateY(-45deg) translateZ(calc(var(--width) * (1 - 0.7071067811865475) * 0.25)) translateX(-10%);
}
trec-3d >*:nth-child(4){
	width: calc(var(--width) * 0.7071067811865475);
	transform: rotateY(45deg) translateZ(calc(var(--width) * (1 - 0.7071067811865475) *0.95)) translateX(39.5%);
}
hexa-3d{ --depth: calc(var(--width) * 0.8660254037844386); }
hexa-3d >*:nth-child(1), hexa-3d >*:nth-child(2){ clip-path: polygon(25% 0, 75% 0, 100% 50%, 75% 100%, 25% 100%, 0 50%); }
hexa-3d >*:nth-child(n+3){
	width: 50%;
	left: 25%;
}
hexa-3d >*:nth-child(6){ transform: rotateY(60deg) translateZ(calc(-1* var(--depth-half))); }
hexa-3d >*:nth-child(4){ transform: rotateY(120deg) translateZ(var(--depth-half)); }
hexa-3d >*:nth-child(3){ transform: rotateY(120deg) translateZ(calc(-1* var(--depth-half))); }
hexa-3d >*:nth-child(7){ transform: rotateY(60deg) translateZ(var(--depth-half)); }

octo-3d >*:nth-child(1), octo-3d >*:nth-child(2){
	clip-path: polygon(29.28935% 0, 70.71065% 0, 100% 29.28935%, 100% 70.71065%, 70.71065% 100%, 29.28935% 100%, 0 70.71065%, 0 29.28935%);
}
octo-3d >*:nth-child(n+3){
	width: 41.4213%;
	left: calc(var(--depth-half) - 20.71065%);
}
octo-3d >*:nth-child(6){ transform: rotateY(45deg) translateZ(calc(-1* var(--depth-half))); }
octo-3d >*:nth-child(4){ transform: rotateY(-45deg) translateZ(calc(-1* var(--depth-half))); }
octo-3d >*:nth-child(8){ transform: rotateY(-45deg) translateZ(var(--depth-half)); }
octo-3d >*:nth-child(9){ transform: rotateY(45deg) translateZ(var(--depth-half)); }

/* ------------------------ les animations ------------------------ */

.mesure {
	/* objet en cours de création */
	--fond:
		linear-gradient(90deg, transparent 49.5%, maroon 49.5% 50.5%, transparent 50.5%),
		linear-gradient(#0994 49.5%, maroon 49.5% 50.5%, #0994 50.5%);
	--bord: none;
	background-image:
		linear-gradient(90deg, transparent 49.5%, maroon 49.5% 50.5%, transparent 50.5%),
		linear-gradient(#0994 49.5%, maroon 49.5% 50.5%, #0994 50.5%);
}

@keyframes spin-horizontal {
	from { transform: rotateY(0); }
	to { transform: rotateY(360deg); }
}
@keyframes spin-vertical {
	from { transform: rotateX(0); }
	to { transform: rotateX(-360deg); }
}
@keyframes spin-transversal {
	from { transform: rotateZ(0); }
	to { transform: rotateZ(-360deg); }
